name: Test Workflow
on:
  push:
    paths: ".github/workflows/test.yaml"
  workflow_dispatch:
    inputs:
      msg:
        description: "message:"
        default: "Hello World!"
        required: true
      # tag:
      #   description: "Release tag:"
      #   default: "v1.0"
      #   required: true

jobs:
  build:
    name: "Matrix msg: ${{matrix.msg}}"
    runs-on: ubuntu-latest
    env:
      arch: ${{github.event.inputs.msg}}
    strategy:
      fail-fast: false
      matrix:
        msg:
          - "Hello matrix!"

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          repository: ${{github.repository}}
          # ref: ${{github.event.inputs.tag}}

      - name: Print system info
        run: |
          cat /etc/os-release
          cat /proc/cpuinfo
          echo "Available cpu count: $(nproc)"

      - name: Print env
        run: env

      - name: Test
        run: |
          command -v upx && upx --version
          command -v clang && clang --version

          tree -L 2 ${GITHUB_WORKSPACE}

          heredoc(){
            cat <<EOF
          heredoc_content
          EOF

            cat <<EOF
            heredoc_content
          EOF

            cat <<-EOF
          heredoc_content
          EOF

          cat <<-EOF
            heredoc_content
          EOF
          }

          heredoc

      - name: Upload
        uses: actions/upload-artifact@main
        with:
          name: os-release
          path: /etc/os-release

      - name: Create Release
        # You may pin to the exact commit or the version.
        # uses: ncipollo/release-action@6c75be85e571768fa31b40abf38de58ba0397db5
        uses: ncipollo/release-action@v1.13.0
        with:
          # An optional flag which indicates if we should update a release if it already exists. Defaults to false.
          allowUpdates: true # optional, default is
          # An optional flag which indicates if artifact read or upload errors should fail the build.
          artifactErrorsFailBuild: # optional, default is
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
          # artifact: # optional, default is
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
          artifacts: /etc/os-release # optional, default is
          # The content type of the artifact. Defaults to raw
          artifactContentType: # optional, default is
          # An optional body for the release.
          body: # optional, default is
          # An optional body file for the release. This should be the path to the file
          bodyFile: # optional, default is
          # An optional commit reference. This will be used to create the tag if it does not exist.
          commit: # optional, default is
          # When provided this will generate a discussion of the specified category. The category must exist otherwise this will cause the action to fail. This isn't used with draft releases
          discussionCategory: # optional, default is
          # Optionally marks this release as a draft release. Set to true to enable.
          draft: # optional, default is
          # Indicates if release notes should be automatically generated.
          generateReleaseNotes: # optional, default is false
          # Indicates if the release should be the "latest" release or not.
          makeLatest: # optional, default is legacy
          # An optional name for the release. If this is omitted the tag will be used.
          name: # optional, default is
          # Indicates if the release body should be omitted.
          omitBody: # optional, default is false
          # Indicates if the release body should be omitted during updates. The body will still be applied for newly created releases. This will preserve the existing body during updates.
          omitBodyDuringUpdate: # optional, default is false
          # Indicates if the draft flag should be omitted during updates. The draft flag will still be applied for newly created releases. This will preserve the existing draft state during updates.
          omitDraftDuringUpdate: # optional, default is false
          # Indicates if the release name should be omitted.
          omitName: # optional, default is false
          # Indicates if the release name should be omitted during updates. The name will still be applied for newly created releases. This will preserve the existing name during updates.
          omitNameDuringUpdate: # optional, default is false
          # Indicates if the prerelease flag should be omitted during updates. The prerelease flag will still be applied for newly created releases. This will preserve the existing prerelease state during updates.
          omitPrereleaseDuringUpdate: # optional, default is false
          # Optionally specify the owner of the repo where the release should be generated. Defaults to current repo's owner.
          owner: # optional, default is
          # Optionally marks this release as prerelease. Set to true to enable.
          prerelease: # optional, default is
          # Indicates if existing release artifacts should be removed, Defaults to false.
          removeArtifacts: # optional, default is false
          # Indicates if existing release artifacts should be replaced. Defaults to true.
          replacesArtifacts: # optional, default is true
          # Optionally specify the repo where the release should be generated. Defaults to current repo
          repo: # optional, default is
          # When skipIfReleaseExists is enabled the action will be skipped if a non-draft release already exists for the provided tag.
          skipIfReleaseExists: false # optional, default is false
          # An optional tag for the release. If this is omitted the git ref will be used (if it is a tag).
          tag: # optional, default is
          # The Github token.
          token: ${{github.token}} # optional, default is ${{ github.token }}
          # When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease.
          updateOnlyUnreleased: # optional, default is false

