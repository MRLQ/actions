name: Build vscode server
run-name: Build vscode server ${{ github.event.inputs.branch }}
on:
  workflow_dispatch:
    inputs:
      branch:
        description: "vscode branch:"
        default: release/1.85
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        tasks:
          [
            vscode-reh-web-linux-x64,
            vscode-reh-web-linux-x64-min,
            vscode-reh-web-linux-arm64,
            vscode-reh-web-linux-arm64-min,
            vscode-reh-web-android-arm64,
            vscode-reh-web-android-arm64-min,
            vscode-reh-web-alpine-arm64,
            vscode-reh-web-alpine-arm64-min,
            vscode-reh-web-linux-alpine,
            vscode-reh-web-linux-alpine-min
          ]

    steps:
      - uses: actions/checkout@main
      - name: Checkout repository
        run: |
          env
          cat /proc/cpuinfo
          tree -L 2 ${GITHUB_WORKSPACE}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.0
        with:
          # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
          node-version: 18.15.0

      - name: Fetch source code and patch
        run: |
          git clone https://github.com/microsoft/vscode --branch=${{ github.event.inputs.branch }} --single-branch --depth=1
          cd vscode

          version="$(echo ${{ github.event.inputs.branch }} | sed 's/release\///')"

          if test -f ${GITHUB_WORKSPACE}/packages/vscode/${version}.patch; then
            echo "Patching source code..."
            patch --strip=1 < ${GITHUB_WORKSPACE}/packages/vscode/${version}.patch --no-backup-if-mismatch -t
          fi

      - name: Build
        run: |
          cd vscode
          build_task() {
            node -e 'console.log(process.version, process.arch, process.platform)'
            ## Electron and browsers are not required
            ## for code-server build.
            export ELECTRON_SKIP_BINARY_DOWNLOAD=1
            export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

            sudo apt update
            sudo apt install build-essential python-is-python3
            yarn global add node-gyp

            build_fail_retry() {
              yarn || yarn || yarn
              yarn gulp ${matrix_task} || yarn gulp ${matrix_task} || yarn gulp ${matrix_task}
            }

            matrix_task="$1"
            case "${matrix_task}" in
            vscode-reh-web-linux-x64*)
              sudo apt install g++ libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev

              build_fail_retry
              ;;
            vscode-reh-web-linux-arm64*)
              TARGET=aarch64-linux-gnu
              export npm_config_arch=arm64

              echo "Setting up sysroot"
              sudo apt install qemu-user-static binfmt-support debootstrap 
              SYSROOT=${PWD}/../aarch64-linux-ubuntu
              ## aarch64 rootfs
              sudo debootstrap --variant=minbase --arch=arm64 --include="libx11-dev,libxkbfile-dev,libsecret-1-dev,libkrb5-dev" stable "${SYSROOT}" http://deb.debian.org/debian/

              echo "Setting up toolchain"
              sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              export CC="$(which ${TARGET}-gcc) --sysroot=${SYSROOT}"
              export CXX="$(which ${TARGET}-g++) --sysroot=${SYSROOT}"

              build_fail_retry
              ;;
            vscode-reh-web-android-arm64*)
              ## Modify based on linux-arm64
              build_task "$(echo "${matrix_task}" | sed 's/android/linux/')"

              export npm_config_arch=arm64
              TARGET=aarch64-linux-android24

              echo "Replacing modules for android..."
              _RELEASE_DIR="${PWD}/../vscode-reh-web-android-arm64"
              mv "${PWD}/../vscode-reh-web-linux-arm64" "${_RELEASE_DIR}"
              export GYP_DEFINES="host_os=linux OS=android"
              ## Android libutil
              _TMP_BUILD_DIR="${PWD}/../tmp_build"
              mkdir -p "${_TMP_BUILD_DIR}/lib"
              echo "INPUT(-lc)" >"${_TMP_BUILD_DIR}/lib/libutil.so"
              NDK_BIN_DIR=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
              NDK_BIN_DIR=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
              export CC="$(command -v "${NDK_BIN_DIR}/clang++") --target=${TARGET}"
              export CXX="$(command -v "${NDK_BIN_DIR}/clang++") --target=${TARGET} -L${_TMP_BUILD_DIR}/lib"
              replace_watcher() {
                (
                  dir=$(find "$1" -name "watcher" -path "*/node_modules/@parcel/watcher")
                  test $? -ne 0 && exit 1
                  echo "replacing watcher (${dir})"
                  cd "${dir}/.."
                  curl -Lks https://registry.npmjs.org/@parcel/watcher-android-arm64/-/watcher-android-arm64-2.3.0.tgz | gzip -d | tar -x
                  # curl -Lks https://registry.npmmirror.com/@parcel/watcher-android-arm64/-/watcher-android-arm64-2.3.0.tgz | gzip -d | tar -x
                  rm -rf watcher
                  mv package watcher
                )
              }
              replace_in_dir() {
                _RELEASE_DIR="$1"
                shift
                echo replacing modules ...
                for module_name in "$@"; do
                  find "${_RELEASE_DIR}" \( -path "*/node_modules/${module_name}" -or -path "*/node_modules/@*/${module_name}" \) -prune | while IFS= read -r module_dir; do
                    echo "replacing ${module_name} (${module_dir})"
                    if test -d "${_TMP_BUILD_DIR}/node_modules/${module_name}"; then
                      rm -rf "${module_dir}" && cp -r "${_TMP_BUILD_DIR}/node_modules/${module_name}" "$(dirname "${module_dir}")"
                    else
                      echo "Warn: ${_TMP_BUILD_DIR}/node_modules/${module_name} not exists!"
                    fi
                  done
                done
              }
              replace_node() {
                echo "replacing node"
                node_version="$(node -v)"
                curl -Lk https://github.com/zongou/build-workflow/releases/download/0.0.0/nodejs-${node_version}-android24-arm64.tar.gz | gzip -d | tar -x "nodejs-${node_version}-android24-arm64/bin/node" -O >"${_RELEASE_DIR}/node"
                chmod +x "${1}/node"
              }
              ## Build modules
              (cd "${_TMP_BUILD_DIR}" && yarn add @vscode/spdlog node-pty native-watchdog)
              replace_in_dir "${_RELEASE_DIR}" @vscode/spdlog node-pty native-watchdog
              replace_watcher "${_RELEASE_DIR}"
              replace_node "${_RELEASE_DIR}"
              ## Fake android as linux to install online extensions
              sed -i '10aexport NODE_OPTIONS="--require $ROOT/out/android-as-linux.js"' "${_RELEASE_DIR}/bin/code-server-oss"
              echo 'Object.defineProperty(process, "platform", { get() { return "linux"; } });' >"${_RELEASE_DIR}/out/android-as-linux.js"
              ;;
            vscode-reh-web-alpine-arm64* | vscode-reh-web-linux-alpine*)
              case "${matrix_task}" in
              vscode-reh-web-alpine-arm64*)
                ARCH=aarch64
                export npm_config_arch=arm64
                ;;
                vscode-reh-web-linux-alpine*)
                ARCH=x86_64
                export npm_config_arch=${ARCH}
                ;;
                esac
                
              TARGET=${ARCH}-linux-musl

              echo "Setting up sysroot"
              sudo apt install qemu-user-static binfmt-support
              SYSROOT="${PWD}/../${ARCH}-alpine"
              mkdir -p "${SYSROOT}"

              curl -Lk https://dl-cdn.alpinelinux.org/alpine/v3.18/releases/${ARCH}/alpine-minirootfs-3.18.4-${ARCH}.tar.gz | gzip -d | tar -C ${SYSROOT} -x

              echo "nameserver 8.8.8.8" >${SYSROOT}/etc/resolv.conf
              sudo chroot "${SYSROOT}" apk add libx11-dev libxkbfile-dev libsecret-dev krb5-dev libstdc++

              echo "Setting up toolchain"
              curl -Lk https://musl.cc/${TARGET}-cross.tgz | gzip -d | tar -x
              TOOLCHAIN=${PWD}/${TARGET}-cross

              case "${ARCH}" in
              x86_64) cp "$(command -v ld)" "${TOOLCHAIN}/bin/${TARGET}-ld";;
              esac

              export CC="${TOOLCHAIN}/bin/${TARGET}-gcc --sysroot=${SYSROOT}"
              export CXX="${TOOLCHAIN}/bin/${TARGET}-g++ --sysroot=${SYSROOT}"

              build_fail_retry
              ;;
            esac
          }

          build_task "${{ matrix.tasks }}"

      - name: Test output
        run: |
          tree -L 1

      - name: Package
        run: |
          find -maxdepth 1 -name "vscode-*" -type d | while IFS= read -r dir; do
            tar -c "${dir}" | xz -T0 > "${GITHUB_WORKSPACE}/${dir}.tar.xz"
          done

      - name: Upload
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.tasks }}
          path: vscode-*.tar.xz
